import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Observable, of, BehaviorSubject } from 'rxjs';
import { AuthService, AccessData } from './auth.service';
import * as i0 from "@angular/core";
import * as i1 from "./auth.service";
const KEYCLOAK = 'KEYCLOAK';
const CAPTCHA = 'CAPTCHA';
let AuthApi = class AuthApi {
    constructor(authService) {
        this.authService = authService;
        console.log('[AuthApi]', 'constructor');
        this.type = KEYCLOAK;
    }
    get success() {
        return this.successVariable;
    }
    set success(success) {
        if (success !== this.successVariable) {
            this.successVariable = success;
            if (this.watchSuccessVariable) {
                this.watchSuccess.next(this.success);
            }
        }
    }
    get watchSuccess() {
        if (!this.watchSuccessVariable) {
            this.watchSuccessVariable = new BehaviorSubject(this.success);
        }
        return this.watchSuccessVariable;
    }
    get accessToken() {
        if (!this.accessTokenVariable) {
            this.accessTokenVariable = sessionStorage.getItem('accessToken');
        }
        return this.accessTokenVariable;
    }
    set accessToken(token) {
        this.accessTokenVariable = token;
        if (this.accessTokenVariable) {
            sessionStorage.setItem('accessToken', this.accessTokenVariable);
        }
        else {
            sessionStorage.removeItem('accessToken');
        }
    }
    get refreshToken() {
        if (!this.refreshTokenVariable) {
            this.refreshTokenVariable = sessionStorage.getItem('refreshToken');
        }
        return this.refreshTokenVariable;
    }
    set refreshToken(token) {
        this.refreshTokenVariable = token;
        if (this.refreshTokenVariable) {
            sessionStorage.setItem('refreshToken', this.refreshTokenVariable);
        }
        else {
            sessionStorage.removeItem('refreshToken');
        }
    }
    get type() {
        return this.typeVariable;
    }
    set type(type) {
        this.typeVariable = type;
    }
    init() {
        console.log('[AuthApi]', 'init');
        const urlParams = new URLSearchParams(window.location.search);
        const code = urlParams.get('code');
        console.log('[AuthApi]', 'URL PARAMS', urlParams, 'CODE', code);
        if (this.type !== CAPTCHA && code) {
            return this.codeLogin(code);
        }
        else if (this.type === CAPTCHA) {
            return this.captchaLogin();
        }
        else {
            return this.initLogin();
        }
    }
    initLogin() {
        console.log('[AuthApi]', 'initLogin');
        return new Observable((observer) => {
            switch (this.type) {
                case KEYCLOAK:
                    const keycloakParams = {
                        state: 'init'
                    };
                    this.authService.keycloak(keycloakParams).subscribe((accessData) => {
                        console.log('[AuthApi]', 'keycloak', 'response', accessData);
                        if (accessData && accessData.redirect) {
                            document.location.href = accessData.redirect;
                        }
                        observer.next(Boolean(accessData && accessData.redirect));
                        observer.complete();
                    });
                    break;
                default:
                    console.log('[AuthApi]', 'unknown type');
                    observer.next(null);
                    observer.complete();
                    break;
            }
        });
    }
    codeLogin(secureCode) {
        console.log('[AuthApi]', 'codeLogin');
        return new Observable((observer) => {
            switch (this.type) {
                case KEYCLOAK:
                    const keycloakParams = {
                        state: 'init',
                        code: secureCode
                    };
                    this.authService.keycloak(keycloakParams).subscribe((accessData) => {
                        console.log('[AuthApi]', 'keycloak', 'response', accessData);
                        this.success = this.handleAccessData(accessData);
                        observer.next(this.success);
                        observer.complete();
                    });
                    break;
                default:
                    console.log('[AuthApi]', 'unknown type');
                    observer.next(null);
                    observer.complete();
                    break;
            }
        });
    }
    captchaLogin() {
        console.log('[AuthApi]', 'captchaLogin');
        return of(null);
    }
    getToken() {
        console.log('[AuthApi]', 'getToken');
        return null;
    }
    updateToken() {
        console.log('[AuthApi]', 'updateToken');
        return of(null);
    }
    handleAccessData(accessData) {
        console.log('[AuthApi]', 'handleAccessData', accessData);
        if (accessData) {
            this.accessToken = accessData.accessToken;
            this.refreshToken = accessData.refreshToken;
        }
        else {
            this.accessToken = null;
            this.refreshToken = null;
        }
        return Boolean(accessData && accessData.accessToken && accessData.refreshToken);
    }
    first() {
        console.log('[AuthApi]', 'first');
        return 'first';
    }
};
AuthApi.ctorParameters = () => [
    { type: AuthService }
];
AuthApi.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthApi_Factory() { return new AuthApi(i0.ɵɵinject(i1.AuthService)); }, token: AuthApi, providedIn: "root" });
AuthApi = __decorate([
    Injectable({
        providedIn: 'root'
    })
], AuthApi);
export { AuthApi };
//# sourceMappingURL=data:application/json;base64,