import { __decorate, __param } from "tslib";
import { Injectable, Inject } from '@angular/core';
import { Observable, BehaviorSubject } from 'rxjs';
import { AuthService } from './auth.service';
import { DCS_AUTH_CONFIG } from './auth-lib.module';
import * as i0 from "@angular/core";
import * as i1 from "./auth.service";
import * as i2 from "./auth-lib.module";
let AuthApi = class AuthApi {
    constructor(authService, config) {
        this.authService = authService;
        this.config = config;
        console.log('[AuthApi]', 'constructor');
        this.type = this.config.defaultType;
    }
    get success() {
        return this.successVar;
    }
    set success(success) {
        if (success !== this.successVar) {
            this.successVar = success;
            if (this.watchSuccessVar && this.successVar !== undefined) {
                this.watchSuccess.next(this.success);
            }
        }
    }
    get watchSuccess() {
        if (!this.watchSuccessVar) {
            this.watchSuccessVar = new BehaviorSubject(this.success);
        }
        return this.watchSuccessVar;
    }
    get accessToken() {
        if (!this.accessTokenVar) {
            this.accessTokenVar = sessionStorage.getItem('accessToken');
        }
        return this.accessTokenVar;
    }
    set accessToken(token) {
        this.accessTokenVar = token;
        if (this.accessTokenVar) {
            sessionStorage.setItem('accessToken', this.accessTokenVar);
        }
        else {
            sessionStorage.removeItem('accessToken');
        }
    }
    get refreshToken() {
        if (!this.refreshTokenVar) {
            this.refreshTokenVar = sessionStorage.getItem('refreshToken');
        }
        return this.refreshTokenVar;
    }
    set refreshToken(token) {
        this.refreshTokenVar = token;
        if (this.refreshTokenVar) {
            sessionStorage.setItem('refreshToken', this.refreshTokenVar);
        }
        else {
            sessionStorage.removeItem('refreshToken');
        }
    }
    init(urlParams) {
        console.log('[AuthApi]', 'init', urlParams);
        const code = urlParams && new URLSearchParams(urlParams).get('code');
        if (code) {
            return this.login(code);
        }
        else {
            return this.initLogin();
        }
    }
    captchaLogin(secret) {
        console.log('[AuthApi]', 'captchaLogin', secret);
        return new Observable((observer) => {
            const captchaParams = {
                token: secret
            };
            this.authService.captcha(captchaParams).subscribe((accessData) => {
                console.log('[AuthApi]', 'captcha', 'response', accessData);
                this.success = this.handleAccessData(accessData);
                observer.next(this.success);
                observer.complete();
            });
        });
    }
    getToken() {
        console.log('[AuthApi]', 'getToken');
        return this.accessToken;
    }
    updateToken() {
        console.log('[AuthApi]', 'updateToken');
        return new Observable((observer) => {
            this.authService.refresh(this.refreshToken).subscribe((accessToken) => {
                console.log('[AuthApi]', 'updateToken', 'response', accessToken);
                this.accessToken = accessToken;
                observer.next(accessToken);
                observer.complete();
            });
        });
    }
    authTypes() {
        console.log('[AuthApi]', 'authTypes');
        return this.authService.authTypes;
    }
    initLogin() {
        console.log('[AuthApi]', 'initLogin', this.type);
        return new Observable((observer) => {
            switch (this.type) {
                case this.authTypes().KEYCLOAK:
                    const keycloakParams = {
                        state: 'init'
                    };
                    this.authService.keycloak(keycloakParams).subscribe((accessData) => {
                        console.log('[AuthApi]', 'keycloak', 'response', accessData);
                        if (accessData && accessData.redirect) {
                            document.location.href = accessData.redirect;
                        }
                        observer.next(Boolean(accessData && accessData.redirect));
                        observer.complete();
                    });
                    break;
                default:
                    console.log('[AuthApi]', 'unknown type');
                    observer.next(null);
                    observer.complete();
                    break;
            }
        });
    }
    login(secret) {
        console.log('[AuthApi]', 'login', secret);
        return new Observable((observer) => {
            switch (this.type) {
                case this.authTypes().KEYCLOAK:
                    const keycloakParams = {
                        state: 'auth',
                        code: secret
                    };
                    this.authService.keycloak(keycloakParams).subscribe((accessData) => {
                        console.log('[AuthApi]', 'keycloak', 'response', accessData);
                        this.success = this.handleAccessData(accessData);
                        observer.next(this.success);
                        observer.complete();
                    });
                    break;
                default:
                    console.log('[AuthApi]', 'unknown type');
                    observer.next(null);
                    observer.complete();
                    break;
            }
        });
    }
    handleAccessData(accessData) {
        console.log('[AuthApi]', 'handleAccessData', accessData);
        if (accessData) {
            this.accessToken = accessData.accessToken;
            this.refreshToken = accessData.refreshToken;
        }
        else {
            this.accessToken = null;
            this.refreshToken = null;
        }
        return Boolean(accessData && accessData.accessToken && accessData.refreshToken);
    }
};
AuthApi.ctorParameters = () => [
    { type: AuthService },
    { type: undefined, decorators: [{ type: Inject, args: [DCS_AUTH_CONFIG,] }] }
];
AuthApi.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthApi_Factory() { return new AuthApi(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.DCS_AUTH_CONFIG)); }, token: AuthApi, providedIn: "root" });
AuthApi = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __param(1, Inject(DCS_AUTH_CONFIG))
], AuthApi);
export { AuthApi };
//# sourceMappingURL=data:application/json;base64,