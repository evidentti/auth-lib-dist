import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Observable, of, BehaviorSubject } from 'rxjs';
import { AuthService, AuthType, AccessData } from './auth.service';
import * as i0 from "@angular/core";
import * as i1 from "./auth.service";
let AuthApi = class AuthApi {
    constructor(authService) {
        this.authService = authService;
        console.log('[AuthApi]', 'constructor');
        this.type = AuthType.KEYCLOAK;
    }
    get success() {
        return this.successVar;
    }
    set success(success) {
        if (success !== this.successVar) {
            this.successVar = success;
            if (this.watchSuccessVar) {
                this.watchSuccess.next(this.success);
            }
        }
    }
    get watchSuccess() {
        if (!this.watchSuccessVar) {
            this.watchSuccessVar = new BehaviorSubject(this.success);
        }
        return this.watchSuccessVar;
    }
    get accessToken() {
        if (!this.accessTokenVar) {
            this.accessTokenVar = sessionStorage.getItem('accessToken');
        }
        return this.accessTokenVar;
    }
    set accessToken(token) {
        this.accessTokenVar = token;
        if (this.accessTokenVar) {
            sessionStorage.setItem('accessToken', this.accessTokenVar);
        }
        else {
            sessionStorage.removeItem('accessToken');
        }
    }
    get refreshToken() {
        if (!this.refreshTokenVar) {
            this.refreshTokenVar = sessionStorage.getItem('refreshToken');
        }
        return this.refreshTokenVar;
    }
    set refreshToken(token) {
        this.refreshTokenVar = token;
        if (this.refreshTokenVar) {
            sessionStorage.setItem('refreshToken', this.refreshTokenVar);
        }
        else {
            sessionStorage.removeItem('refreshToken');
        }
    }
    init(type, urlParams) {
        console.log('[AuthApi]', 'init', type, urlParams);
        const code = urlParams && new URLSearchParams(urlParams).get('code');
        console.log('[AuthApi]', 'CODE', code);
        if (this.type !== AuthType.CAPTCHA && code) {
            return this.codeLogin(code);
        }
        else if (this.type === AuthType.CAPTCHA) {
            return this.captchaLogin();
        }
        else {
            return this.initLogin();
        }
    }
    initLogin() {
        console.log('[AuthApi]', 'initLogin');
        return new Observable((observer) => {
            switch (this.type) {
                case AuthType.KEYCLOAK:
                    const keycloakParams = {
                        state: 'init'
                    };
                    this.authService.keycloak(keycloakParams).subscribe((accessData) => {
                        console.log('[AuthApi]', 'keycloak', 'response', accessData);
                        if (accessData && accessData.redirect) {
                            document.location.href = accessData.redirect;
                        }
                        observer.next(Boolean(accessData && accessData.redirect));
                        observer.complete();
                    });
                    break;
                default:
                    console.log('[AuthApi]', 'unknown type');
                    observer.next(null);
                    observer.complete();
                    break;
            }
        });
    }
    codeLogin(secureCode) {
        console.log('[AuthApi]', 'codeLogin');
        return new Observable((observer) => {
            switch (this.type) {
                case AuthType.KEYCLOAK:
                    const keycloakParams = {
                        state: 'init',
                        code: secureCode
                    };
                    this.authService.keycloak(keycloakParams).subscribe((accessData) => {
                        console.log('[AuthApi]', 'keycloak', 'response', accessData);
                        this.success = this.handleAccessData(accessData);
                        observer.next(this.success);
                        observer.complete();
                    });
                    break;
                default:
                    console.log('[AuthApi]', 'unknown type');
                    observer.next(null);
                    observer.complete();
                    break;
            }
        });
    }
    captchaLogin() {
        console.log('[AuthApi]', 'captchaLogin');
        return of(null);
    }
    getToken() {
        console.log('[AuthApi]', 'getToken');
        return this.accessToken;
    }
    updateToken() {
        console.log('[AuthApi]', 'updateToken');
        return new Observable((observer) => {
            this.authService.refresh(this.refreshToken).subscribe((accessToken) => {
                console.log('[AuthApi]', 'updateToken', 'response', accessToken);
                this.accessToken = accessToken;
                observer.next(accessToken);
                observer.complete();
            });
        });
    }
    handleAccessData(accessData) {
        console.log('[AuthApi]', 'handleAccessData', accessData);
        if (accessData) {
            this.accessToken = accessData.accessToken;
            this.refreshToken = accessData.refreshToken;
        }
        else {
            this.accessToken = null;
            this.refreshToken = null;
        }
        return Boolean(accessData && accessData.accessToken && accessData.refreshToken);
    }
};
AuthApi.ctorParameters = () => [
    { type: AuthService }
];
AuthApi.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthApi_Factory() { return new AuthApi(i0.ɵɵinject(i1.AuthService)); }, token: AuthApi, providedIn: "root" });
AuthApi = __decorate([
    Injectable({
        providedIn: 'root'
    })
], AuthApi);
export { AuthApi };
//# sourceMappingURL=data:application/json;base64,