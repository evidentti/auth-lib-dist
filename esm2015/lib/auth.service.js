import { __decorate, __param } from "tslib";
import { Injectable, Inject } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { map } from 'rxjs/operators';
import { DCS_AUTH_CONFIG } from './auth-lib.module';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./auth-lib.module";
const AUTH_TYPE = 'auth-type';
let AuthService = class AuthService {
    constructor(httpClient, config) {
        this.httpClient = httpClient;
        this.config = config;
        console.log('[AuthService]', 'constructor', config);
    }
    oauth(params) {
        console.log('[AuthService]', 'oauth');
        if (params && params.state) {
            params.uri = this.config.redirectUrl;
            return this.post(params);
        }
        else {
            throw new Error('Mandatory parameters state or uri missing');
        }
    }
    signicat(params) {
        console.log('[AuthService]', 'signicat');
        if (params && params.state) {
            params.uri = this.config.redirectUrl;
            this.authType = this.authTypes.SIGNICAT;
            const body = { code: params.code, uri: params.uri, state: params.state };
            return this.post(body);
        }
        else {
            throw new Error('Mandatory parameters state or uri missing');
        }
    }
    vepa(params) {
        console.log('[AuthService]', 'vepa');
        if (params.s0 && params.s1 && params.s2 && params.s3 && params.state) {
            this.authType = this.authTypes.VEPA;
            return this.post(params);
        }
        else {
            throw new Error('Mandatory parameters s0, s1, s2, s3 or state missing');
        }
    }
    keycloak(params) {
        console.log('[AuthService]', 'keycloak');
        if (params && params.state) {
            params.uri = this.config.redirectUrl;
            this.authType = this.authTypes.KEYCLOAK;
            return this.post(params);
        }
        else {
            throw new Error('Mandatory parameters uri or state missing');
        }
    }
    captcha(params) {
        console.log('[AuthService]', 'captcha');
        if (params.token) {
            this.authType = this.authTypes.CAPTCHA;
            const token = params.token;
            return this.post({ token });
        }
        else {
            throw new Error('Mandatory parameters token missing');
        }
    }
    refresh(token) {
        console.log('[AuthService]', 'refresh');
        const options = { headers: { Authorization: `Bearer ${token}` } };
        return this.httpClient.post(this.config.refreshUrl, null, options).pipe(map((response) => {
            return response && response.accessToken;
        }));
    }
    post(body) {
        console.log('[AuthService]', 'post', body);
        const options = { headers: { 'X-Auth-Type': this.authType } };
        return this.httpClient.post(this.config.authenticationUrl, body, options).pipe(map((response) => {
            return response;
        }));
    }
    get authType() {
        return sessionStorage.getItem(AUTH_TYPE);
    }
    set authType(type) {
        sessionStorage.setItem(AUTH_TYPE, type);
    }
    get authTypes() {
        return {
            KEYCLOAK: 'keycloak',
            SIGNICAT: 'signicat',
            VEPA: 'vepa',
            CAPTCHA: 'captcha'
        };
    }
};
AuthService.ctorParameters = () => [
    { type: HttpClient },
    { type: undefined, decorators: [{ type: Inject, args: [DCS_AUTH_CONFIG,] }] }
];
AuthService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthService_Factory() { return new AuthService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DCS_AUTH_CONFIG)); }, token: AuthService, providedIn: "root" });
AuthService = __decorate([
    Injectable({
        providedIn: 'root',
    }),
    __param(1, Inject(DCS_AUTH_CONFIG))
], AuthService);
export { AuthService };
//# sourceMappingURL=data:application/json;base64,