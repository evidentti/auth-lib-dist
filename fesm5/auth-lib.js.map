{"version":3,"file":"auth-lib.js","sources":["ng://auth-lib/lib/auth-lib.component.ts","ng://auth-lib/lib/auth-lib.module.ts","ng://auth-lib/lib/auth.service.ts","ng://auth-lib/lib/auth-lib.service.ts","ng://auth-lib/public-api.ts","ng://auth-lib/auth-lib.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-auth-lib',\n  template: `\n    <p>\n      auth-lib works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class AuthComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { NgModule, InjectionToken } from '@angular/core';\nimport { AuthComponent } from './auth-lib.component';\n\nexport interface AuthConfig {\n  authenticationUrl: string;\n  refreshUrl: string;\n  redirectUrl: string;\n}\n\nexport const DCS_AUTH_CONFIG = new InjectionToken<AuthConfig>('Authentication Configuration');\n\n@NgModule({\n  declarations: [AuthComponent],\n  imports: [],\n  providers: [\n    {\n      provide: DCS_AUTH_CONFIG,\n      useValue: { authenticationUrl: 'authenticate', refreshUrl: 'refresh', redirectUrl: 'redirect' }\n    }\n  ],\n  exports: [AuthComponent]\n})\nexport class AuthModule { }\n","import { Injectable, Inject } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { DCS_AUTH_CONFIG, AuthConfig } from './auth-lib.module';\n\nconst AUTH_TYPE = 'auth-type';\n\nexport enum AuthType {\n  KEYCLOAK = 'keycloak',\n  SIGNICAT = 'signicat',\n  VEPA = 'vepa',\n  CAPTCHA = 'captcha'\n}\n\nexport interface AccessData {\n  accessToken?: string;\n  refreshToken?: string;\n  redirect?: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n\n  constructor(protected httpClient: HttpClient, @Inject(DCS_AUTH_CONFIG) private config: AuthConfig) {\n    console.log('[AuthService]', 'constructor', config);\n  }\n\n  oauth(params: any) {\n    console.log('[AuthService]', 'oauth');\n    if (params && params.state) {\n      params.uri = this.config.redirectUrl;\n      return this.post(params);\n    } else {\n      throw new Error('Mandatory parameters state or uri missing');\n    }\n  }\n\n  signicat(params: any): Observable<AccessData> {\n    console.log('[AuthService]', 'signicat');\n    if (params && params.state) {\n      params.uri = this.config.redirectUrl;\n      this.authType = AuthType.SIGNICAT;\n      const body = { code: params.code, uri: params.uri, state: params.state };\n      return this.post(body);\n    } else {\n      throw new Error('Mandatory parameters state or uri missing');\n    }\n  }\n\n  vepa(params: any): Observable<AccessData> {\n    console.log('[AuthService]', 'vepa');\n    if (params.s0 && params.s1 && params.s2 && params.s3 && params.state) {\n      this.authType = AuthType.VEPA;\n      return this.post(params);\n    } else {\n      throw new Error('Mandatory parameters s0, s1, s2, s3 or state missing');\n    }\n  }\n\n  keycloak(params: any): Observable<AccessData> {\n    console.log('[AuthService]', 'keycloak');\n    if (params && params.state) {\n      params.uri = this.config.redirectUrl;\n      this.authType = AuthType.KEYCLOAK;\n      return this.post(params);\n    } else {\n      throw new Error('Mandatory parameters uri or state missing');\n    }\n  }\n\n  captcha(params: any): Observable<AccessData> {\n    console.log('[AuthService]', 'captcha');\n    if (params.token) {\n      this.authType = AuthType.CAPTCHA;\n      const token = params.token;\n      return this.post({ token });\n    } else {\n      throw new Error('Mandatory parameters token missing');\n    }\n  }\n\n  refresh(token: string): Observable<string> {\n    console.log('[AuthService]', 'refresh');\n    const options = { headers: { Authorization: `Bearer ${token}` } };\n    return this.httpClient.post<AccessData>(this.config.refreshUrl, null, options).pipe(\n      map((response: AccessData) => {\n        return response && response.accessToken;\n      })\n    );\n  }\n\n  private post(body: any): Observable<AccessData> {\n    console.log('[AuthService]', 'post', body);\n    const options = { headers: { 'X-Auth-Type': this.authType } };\n    return this.httpClient.post<AccessData>(this.config.authenticationUrl, body, options).pipe(\n      map((response: AccessData) => {\n        return response;\n      })\n    );\n  }\n\n  get authType() {\n    return sessionStorage.getItem(AUTH_TYPE) as AuthType;\n  }\n\n  set authType(type: AuthType) {\n    sessionStorage.setItem(AUTH_TYPE, type);\n  }\n\n  get authTypes() {\n    return AuthType;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, BehaviorSubject, Observer } from 'rxjs';\nimport { AuthService, AuthType, AccessData } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthApi {\n\n  private type: string;\n  private successVar: boolean;\n  private watchSuccessVar: BehaviorSubject<boolean>;\n  private accessTokenVar: string;\n  private refreshTokenVar: string;\n\n  get success(): boolean {\n    return this.successVar;\n  }\n\n  set success(success: boolean) {\n    if (success !== this.successVar) {\n      this.successVar = success;\n      if (this.watchSuccessVar) {\n        this.watchSuccess.next(this.success);\n      }\n    }\n  }\n\n  get watchSuccess() {\n    if (!this.watchSuccessVar) {\n      this.watchSuccessVar = new BehaviorSubject<boolean>(this.success);\n    }\n    return this.watchSuccessVar;\n  }\n\n  private get accessToken() {\n    if (!this.accessTokenVar) {\n      this.accessTokenVar = sessionStorage.getItem('accessToken');\n    }\n    return this.accessTokenVar;\n  }\n\n  private set accessToken(token: string) {\n    this.accessTokenVar = token;\n    if (this.accessTokenVar) {\n      sessionStorage.setItem('accessToken', this.accessTokenVar);\n    } else {\n      sessionStorage.removeItem('accessToken');\n    }\n  }\n\n  private get refreshToken() {\n    if (!this.refreshTokenVar) {\n      this.refreshTokenVar = sessionStorage.getItem('refreshToken');\n    }\n    return this.refreshTokenVar;\n  }\n\n  private set refreshToken(token: string) {\n    this.refreshTokenVar = token;\n    if (this.refreshTokenVar) {\n      sessionStorage.setItem('refreshToken', this.refreshTokenVar);\n    } else {\n      sessionStorage.removeItem('refreshToken');\n    }\n  }\n\n  constructor(private authService: AuthService) {\n    console.log('[AuthApi]', 'constructor');\n    this.type = AuthType.KEYCLOAK;\n  }\n\n  init(type: AuthType, urlParams?: string): Observable<boolean> {\n    console.log('[AuthApi]', 'init', type, urlParams);\n    const code = urlParams && new URLSearchParams(urlParams).get('code');\n    console.log('[AuthApi]', 'CODE', code);\n    if (this.type !== AuthType.CAPTCHA && code) {\n      return this.codeLogin(code);\n    } else if (this.type === AuthType.CAPTCHA) {\n      return this.captchaLogin();\n    } else {\n      return this.initLogin();\n    }\n  }\n\n  initLogin(): Observable<boolean> {\n    console.log('[AuthApi]', 'initLogin');\n    return new Observable((observer: Observer<boolean>) => {\n      switch (this.type) {\n        case AuthType.KEYCLOAK:\n          const keycloakParams = {\n            state: 'init'\n          };\n          this.authService.keycloak(keycloakParams).subscribe((accessData: AccessData) => {\n            console.log('[AuthApi]', 'keycloak', 'response', accessData);\n            if (accessData && accessData.redirect) {\n              document.location.href = accessData.redirect;\n            }\n            observer.next(Boolean(accessData && accessData.redirect));\n            observer.complete();\n          });\n          break;\n\n        default:\n          console.log('[AuthApi]', 'unknown type');\n          observer.next(null);\n          observer.complete();\n          break;\n      }\n    });\n  }\n\n  codeLogin(secureCode: string): Observable<boolean> {\n    console.log('[AuthApi]', 'codeLogin');\n    return new Observable((observer: Observer<boolean>) => {\n      switch (this.type) {\n        case AuthType.KEYCLOAK:\n          const keycloakParams = {\n            state: 'init',\n            code: secureCode\n          };\n          this.authService.keycloak(keycloakParams).subscribe((accessData: AccessData) => {\n            console.log('[AuthApi]', 'keycloak', 'response', accessData);\n            this.success = this.handleAccessData(accessData);\n            observer.next(this.success);\n            observer.complete();\n          });\n          break;\n\n        default:\n          console.log('[AuthApi]', 'unknown type');\n          observer.next(null);\n          observer.complete();\n          break;\n      }\n    });\n  }\n\n  captchaLogin(): Observable<boolean> {\n    console.log('[AuthApi]', 'captchaLogin');\n    return of(null);\n  }\n\n  getToken(): string {\n    console.log('[AuthApi]', 'getToken');\n    return this.accessToken;\n  }\n\n  updateToken(): Observable<string> {\n    console.log('[AuthApi]', 'updateToken');\n    return new Observable((observer: Observer<string>) => {\n      this.authService.refresh(this.refreshToken).subscribe((accessToken: string) => {\n        console.log('[AuthApi]', 'updateToken', 'response', accessToken);\n        this.accessToken = accessToken;\n        observer.next(accessToken);\n        observer.complete();\n      });\n    });\n  }\n\n  private handleAccessData(accessData: AccessData): boolean {\n    console.log('[AuthApi]', 'handleAccessData', accessData);\n    if (accessData) {\n      this.accessToken = accessData.accessToken;\n      this.refreshToken = accessData.refreshToken;\n    } else {\n      this.accessToken = null;\n      this.refreshToken = null;\n    }\n    return Boolean(accessData && accessData.accessToken && accessData.refreshToken);\n  }\n}\n","/*\n * Public API Surface of auth-lib\n */\n\nexport * from './lib/auth-lib.service';\nexport * from './lib/auth-lib.component';\nexport * from './lib/auth-lib.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {AuthService as ɵa} from './lib/auth.service';"],"names":[],"mappings":"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"}