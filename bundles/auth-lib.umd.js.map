{"version":3,"file":"auth-lib.umd.js","sources":["ng://auth-lib/lib/auth-lib.component.ts","ng://auth-lib/lib/auth-lib.module.ts","ng://auth-lib/lib/auth.service.ts","ng://auth-lib/lib/auth-lib.service.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-auth-lib',\n  template: `\n    <p>\n      auth-lib works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class AuthComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { NgModule, InjectionToken } from '@angular/core';\nimport { AuthComponent } from './auth-lib.component';\n\nexport interface AuthConfig {\n  authenticationUrl: string;\n  refreshUrl: string;\n  redirectUrl: string;\n}\n\nexport const DCS_AUTH_CONFIG = new InjectionToken<AuthConfig>('Authentication Configuration');\n\n@NgModule({\n  declarations: [AuthComponent],\n  imports: [],\n  providers: [\n    {\n      provide: DCS_AUTH_CONFIG,\n      useValue: { authenticationUrl: 'authenticate', refreshUrl: 'refresh', redirectUrl: 'redirect' }\n    }\n  ],\n  exports: [AuthComponent]\n})\nexport class AuthModule { }\n","import { Injectable, Inject } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { DCS_AUTH_CONFIG, AuthConfig } from './auth-lib.module';\n\nconst AUTH_TYPE = 'auth-type';\n\nenum AuthType {\n  KEYCLOAK = 'keycloak',\n  SIGNICAT = 'signicat',\n  VEPA = 'vepa',\n  CAPTCHA = 'captcha'\n}\n\nexport interface AccessData {\n  accessToken?: string;\n  refreshToken?: string;\n  redirect?: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n\n  constructor(protected httpClient: HttpClient, @Inject(DCS_AUTH_CONFIG) private config: AuthConfig) {\n    console.log('[AuthService]', 'constructor', config);\n  }\n\n  public oauth(params: any) {\n    console.log('[AuthService]', 'oauth');\n    if (params.state && params.uri) {\n      return this.post(params);\n    } else {\n      throw new Error('Mandatory parameters state or uri missing');\n    }\n  }\n\n  public signicat(params: any): Observable<AccessData> {\n    console.log('[AuthService]', 'signicat');\n    if (params.state && params.uri) {\n      this.authType = AuthType.SIGNICAT;\n      const body = { code: params.code, uri: params.uri, state: params.state };\n      return this.post(body);\n    } else {\n      throw new Error('Mandatory parameters state or uri missing');\n    }\n  }\n\n  public vepa(params: any): Observable<AccessData> {\n    console.log('[AuthService]', 'vepa');\n    if (params.s0 && params.s1 && params.s2 && params.s3 && params.state) {\n      this.authType = AuthType.VEPA;\n      return this.post(params);\n    } else {\n      throw new Error('Mandatory parameters s0, s1, s2, s3 or state missing');\n    }\n  }\n\n  public keycloak(params: any): Observable<AccessData> {\n    console.log('[AuthService]', 'keycloak');\n    if (params && params.state) {\n      params.uri = this.config.redirectUrl;\n      this.authType = AuthType.KEYCLOAK;\n      return this.post(params);\n    } else {\n      throw new Error('Mandatory parameters uri or state missing');\n    }\n  }\n\n  public captcha(params: any): Observable<AccessData> {\n    console.log('[AuthService]', 'captcha');\n    if (params.token) {\n      this.authType = AuthType.CAPTCHA;\n      const token = params.token;\n      return this.post({ token });\n    } else {\n      throw new Error('Mandatory parameters token missing');\n    }\n  }\n\n  public refresh(token: string): Observable<string> {\n    console.log('[AuthService]', 'refresh');\n    const options = { headers: { Authorization: `Bearer ${token}` } };\n    return this.httpClient.post<AccessData>(this.config.refreshUrl, null, options).pipe(\n      map((response: AccessData) => {\n        return response && response.accessToken;\n      })\n    );\n  }\n\n  private post(body: any): Observable<AccessData> {\n    console.log('[AuthService]', 'post', body);\n    const options = { headers: { 'X-Auth-Type': this.authType } };\n    return this.httpClient.post<AccessData>(this.config.authenticationUrl, body, options).pipe(\n      map((response: AccessData) => {\n        return response;\n      })\n    );\n  }\n\n  get authType() {\n    return sessionStorage.getItem(AUTH_TYPE) as AuthType;\n  }\n\n  set authType(type: AuthType) {\n    sessionStorage.setItem(AUTH_TYPE, type);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, BehaviorSubject, Observer } from 'rxjs';\nimport { AuthService, AccessData } from './auth.service';\n\nconst KEYCLOAK = 'KEYCLOAK';\nconst CAPTCHA = 'CAPTCHA';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthApi {\n\n  private successVariable: boolean;\n  get success(): boolean {\n    return this.successVariable;\n  }\n  set success(success: boolean) {\n    if (success !== this.successVariable) {\n      this.successVariable = success;\n      if (this.watchSuccessVariable) {\n        this.watchSuccess.next(this.success);\n      }\n    }\n  }\n\n  private watchSuccessVariable: BehaviorSubject<boolean>;\n  get watchSuccess() {\n    if (!this.watchSuccessVariable) {\n      this.watchSuccessVariable = new BehaviorSubject<boolean>(this.success);\n    }\n    return this.watchSuccessVariable;\n  }\n\n  private accessTokenVariable: string;\n  get accessToken() {\n    if (!this.accessTokenVariable) {\n      this.accessTokenVariable = sessionStorage.getItem('accessToken');\n    }\n    return this.accessTokenVariable;\n  }\n  set accessToken(token: string) {\n    this.accessTokenVariable = token;\n    if (this.accessTokenVariable) {\n      sessionStorage.setItem('accessToken', this.accessTokenVariable);\n    } else {\n      sessionStorage.removeItem('accessToken');\n    }\n  }\n\n  private refreshTokenVariable: string;\n  get refreshToken() {\n    if (!this.refreshTokenVariable) {\n      this.refreshTokenVariable = sessionStorage.getItem('refreshToken');\n    }\n    return this.refreshTokenVariable;\n  }\n  set refreshToken(token: string) {\n    this.refreshTokenVariable = token;\n    if (this.refreshTokenVariable) {\n      sessionStorage.setItem('refreshToken', this.refreshTokenVariable);\n    } else {\n      sessionStorage.removeItem('refreshToken');\n    }\n  }\n\n  private typeVariable: string;\n  get type() {\n    return this.typeVariable;\n  }\n  set type(type: string) {\n    this.typeVariable = type;\n  }\n\n  constructor(private authService: AuthService) {\n    console.log('[AuthApi]', 'constructor');\n    this.type = KEYCLOAK;\n  }\n\n  init(urlParams?: string): Observable<boolean> {\n    console.log('[AuthApi]', 'init');\n    // const urlParams = new URLSearchParams(window.location.search);\n    const code = urlParams && new URLSearchParams(urlParams).get('code');\n    console.log('[AuthApi]', 'URL PARAMS', urlParams, 'CODE', code);\n    if (this.type !== CAPTCHA && code) {\n      return this.codeLogin(code);\n    } else if (this.type === CAPTCHA) {\n      return this.captchaLogin();\n    } else {\n      return this.initLogin();\n    }\n  }\n\n  initLogin(): Observable<boolean> {\n    console.log('[AuthApi]', 'initLogin');\n    return new Observable((observer: Observer<boolean>) => {\n      switch (this.type) {\n        case KEYCLOAK:\n          const keycloakParams = {\n            state: 'init'\n          };\n          this.authService.keycloak(keycloakParams).subscribe((accessData: AccessData) => {\n            console.log('[AuthApi]', 'keycloak', 'response', accessData);\n            if (accessData && accessData.redirect) {\n              document.location.href = accessData.redirect;\n            }\n            observer.next(Boolean(accessData && accessData.redirect));\n            observer.complete();\n          });\n          break;\n\n        default:\n          console.log('[AuthApi]', 'unknown type');\n          observer.next(null);\n          observer.complete();\n          break;\n      }\n    });\n  }\n\n  codeLogin(secureCode: string): Observable<boolean> {\n    console.log('[AuthApi]', 'codeLogin');\n    return new Observable((observer: Observer<boolean>) => {\n      switch (this.type) {\n        case KEYCLOAK:\n          const keycloakParams = {\n            state: 'init',\n            code: secureCode\n          };\n          this.authService.keycloak(keycloakParams).subscribe((accessData: AccessData) => {\n            console.log('[AuthApi]', 'keycloak', 'response', accessData);\n            this.success = this.handleAccessData(accessData);\n            observer.next(this.success);\n            observer.complete();\n          });\n          break;\n\n        default:\n          console.log('[AuthApi]', 'unknown type');\n          observer.next(null);\n          observer.complete();\n          break;\n      }\n    });\n  }\n\n  captchaLogin(): Observable<boolean> {\n    console.log('[AuthApi]', 'captchaLogin');\n    return of(null);\n  }\n\n  getToken(): string {\n    console.log('[AuthApi]', 'getToken');\n    return this.accessToken;\n  }\n\n  updateToken(): Observable<string> {\n    console.log('[AuthApi]', 'updateToken');\n    return new Observable((observer: Observer<string>) => {\n      this.authService.refresh(this.refreshToken).subscribe((accessToken: string) => {\n        console.log('[AuthApi]', 'updateToken', 'response', accessToken);\n        this.accessToken = accessToken;\n        observer.next(accessToken);\n        observer.complete();\n      });\n    });\n  }\n\n  private handleAccessData(accessData: AccessData): boolean {\n    console.log('[AuthApi]', 'handleAccessData', accessData);\n    if (accessData) {\n      this.accessToken = accessData.accessToken;\n      this.refreshToken = accessData.refreshToken;\n    } else {\n      this.accessToken = null;\n      this.refreshToken = null;\n    }\n    return Boolean(accessData && accessData.accessToken && accessData.refreshToken);\n  }\n}\n"],"names":["i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","Component","InjectionToken","NgModule","map","Injectable","Inject","BehaviorSubject","Observable","of"],"mappings":"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"}