{"version":3,"sources":["ng://auth-lib/lib/auth-lib.component.ts","ng://auth-lib/lib/auth-lib.module.ts","ng://auth-lib/lib/auth.service.ts","ng://auth-lib/lib/auth-lib.service.ts"],"names":["AuthComponent","prototype","ngOnInit","selectors","decls","vars","template","rf","ctx","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","DCS_AUTH_CONFIG","InjectionToken","AuthModule","providers","provide","useValue","authenticationUrl","refreshUrl","redirectUrl","imports","declarations","exports","AuthType","AuthService","httpClient","config","this","console","log","oauth","params","state","uri","post","Error","signicat","authType","SIGNICAT","body","code","vepa","s0","s1","s2","s3","VEPA","keycloak","KEYCLOAK","captcha","token","CAPTCHA","refresh","options","headers","Authorization","pipe","map","response","accessToken","X-Auth-Type","Object","defineProperty","sessionStorage","getItem","type","setItem","core","ɵɵinject","http","HttpClient","factory","ɵfac","providedIn","AuthApi","authService","successVariable","success","watchSuccessVariable","watchSuccess","next","BehaviorSubject","accessTokenVariable","removeItem","refreshTokenVariable","typeVariable","init","urlParams","URLSearchParams","get","codeLogin","captchaLogin","initLogin","_this","Observable","observer","subscribe","accessData","redirect","document","location","href","Boolean","complete","secureCode","keycloakParams","handleAccessData","of","getToken","updateToken","refreshToken"],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-auth-lib',\n  template: `\n    <p>\n      auth-lib works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class AuthComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { NgModule, InjectionToken } from '@angular/core';\nimport { AuthComponent } from './auth-lib.component';\n\nexport interface AuthConfig {\n  authenticationUrl: string;\n  refreshUrl: string;\n  redirectUrl: string;\n}\n\nexport const DCS_AUTH_CONFIG = new InjectionToken<AuthConfig>('Authentication Configuration');\n\n@NgModule({\n  declarations: [AuthComponent],\n  imports: [],\n  providers: [\n    {\n      provide: DCS_AUTH_CONFIG,\n      useValue: { authenticationUrl: 'authenticate', refreshUrl: 'refresh', redirectUrl: 'redirect' }\n    }\n  ],\n  exports: [AuthComponent]\n})\nexport class AuthModule { }\n","import { Injectable, Inject } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { DCS_AUTH_CONFIG, AuthConfig } from './auth-lib.module';\n\nconst AUTH_TYPE = 'auth-type';\n\nenum AuthType {\n  KEYCLOAK = 'keycloak',\n  SIGNICAT = 'signicat',\n  VEPA = 'vepa',\n  CAPTCHA = 'captcha'\n}\n\nexport interface AccessData {\n  accessToken?: string;\n  refreshToken?: string;\n  redirect?: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n\n  constructor(protected httpClient: HttpClient, @Inject(DCS_AUTH_CONFIG) private config: AuthConfig) {\n    console.log('[AuthService]', 'constructor', config);\n  }\n\n  public oauth(params: any) {\n    console.log('[AuthService]', 'oauth');\n    if (params.state && params.uri) {\n      return this.post(params);\n    } else {\n      throw new Error('Mandatory parameters state or uri missing');\n    }\n  }\n\n  public signicat(params: any): Observable<AccessData> {\n    console.log('[AuthService]', 'signicat');\n    if (params.state && params.uri) {\n      this.authType = AuthType.SIGNICAT;\n      const body = { code: params.code, uri: params.uri, state: params.state };\n      return this.post(body);\n    } else {\n      throw new Error('Mandatory parameters state or uri missing');\n    }\n  }\n\n  public vepa(params: any): Observable<AccessData> {\n    console.log('[AuthService]', 'vepa');\n    if (params.s0 && params.s1 && params.s2 && params.s3 && params.state) {\n      this.authType = AuthType.VEPA;\n      return this.post(params);\n    } else {\n      throw new Error('Mandatory parameters s0, s1, s2, s3 or state missing');\n    }\n  }\n\n  public keycloak(params: any): Observable<AccessData> {\n    console.log('[AuthService]', 'keycloak');\n    if (params && params.state) {\n      params.uri = this.config.redirectUrl;\n      this.authType = AuthType.KEYCLOAK;\n      return this.post(params);\n    } else {\n      throw new Error('Mandatory parameters uri or state missing');\n    }\n  }\n\n  public captcha(params: any): Observable<AccessData> {\n    console.log('[AuthService]', 'captcha');\n    if (params.token) {\n      this.authType = AuthType.CAPTCHA;\n      const token = params.token;\n      return this.post({ token });\n    } else {\n      throw new Error('Mandatory parameters token missing');\n    }\n  }\n\n  public refresh(token: string): Observable<string> {\n    console.log('[AuthService]', 'refresh');\n    const options = { headers: { Authorization: `Bearer ${token}` } };\n    return this.httpClient.post<AccessData>(this.config.refreshUrl, null, options).pipe(\n      map((response: AccessData) => {\n        return response && response.accessToken;\n      })\n    );\n  }\n\n  private post(body: any): Observable<AccessData> {\n    console.log('[AuthService]', 'post', body);\n    const options = { headers: { 'X-Auth-Type': this.authType } };\n    return this.httpClient.post<AccessData>(this.config.authenticationUrl, body, options).pipe(\n      map((response: AccessData) => {\n        return response;\n      })\n    );\n  }\n\n  get authType() {\n    return sessionStorage.getItem(AUTH_TYPE) as AuthType;\n  }\n\n  set authType(type: AuthType) {\n    sessionStorage.setItem(AUTH_TYPE, type);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, BehaviorSubject, Observer } from 'rxjs';\nimport { AuthService, AccessData } from './auth.service';\n\nconst KEYCLOAK = 'KEYCLOAK';\nconst CAPTCHA = 'CAPTCHA';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthApi {\n\n  private successVariable: boolean;\n  get success(): boolean {\n    return this.successVariable;\n  }\n  set success(success: boolean) {\n    if (success !== this.successVariable) {\n      this.successVariable = success;\n      if (this.watchSuccessVariable) {\n        this.watchSuccess.next(this.success);\n      }\n    }\n  }\n\n  private watchSuccessVariable: BehaviorSubject<boolean>;\n  get watchSuccess() {\n    if (!this.watchSuccessVariable) {\n      this.watchSuccessVariable = new BehaviorSubject<boolean>(this.success);\n    }\n    return this.watchSuccessVariable;\n  }\n\n  private accessTokenVariable: string;\n  get accessToken() {\n    if (!this.accessTokenVariable) {\n      this.accessTokenVariable = sessionStorage.getItem('accessToken');\n    }\n    return this.accessTokenVariable;\n  }\n  set accessToken(token: string) {\n    this.accessTokenVariable = token;\n    if (this.accessTokenVariable) {\n      sessionStorage.setItem('accessToken', this.accessTokenVariable);\n    } else {\n      sessionStorage.removeItem('accessToken');\n    }\n  }\n\n  private refreshTokenVariable: string;\n  get refreshToken() {\n    if (!this.refreshTokenVariable) {\n      this.refreshTokenVariable = sessionStorage.getItem('refreshToken');\n    }\n    return this.refreshTokenVariable;\n  }\n  set refreshToken(token: string) {\n    this.refreshTokenVariable = token;\n    if (this.refreshTokenVariable) {\n      sessionStorage.setItem('refreshToken', this.refreshTokenVariable);\n    } else {\n      sessionStorage.removeItem('refreshToken');\n    }\n  }\n\n  private typeVariable: string;\n  get type() {\n    return this.typeVariable;\n  }\n  set type(type: string) {\n    this.typeVariable = type;\n  }\n\n  constructor(private authService: AuthService) {\n    console.log('[AuthApi]', 'constructor');\n    this.type = KEYCLOAK;\n  }\n\n  init(urlParams?: string): Observable<boolean> {\n    console.log('[AuthApi]', 'init');\n    // const urlParams = new URLSearchParams(window.location.search);\n    const code = urlParams && new URLSearchParams(urlParams).get('code');\n    console.log('[AuthApi]', 'URL PARAMS', urlParams, 'CODE', code);\n    if (this.type !== CAPTCHA && code) {\n      return this.codeLogin(code);\n    } else if (this.type === CAPTCHA) {\n      return this.captchaLogin();\n    } else {\n      return this.initLogin();\n    }\n  }\n\n  initLogin(): Observable<boolean> {\n    console.log('[AuthApi]', 'initLogin');\n    return new Observable((observer: Observer<boolean>) => {\n      switch (this.type) {\n        case KEYCLOAK:\n          const keycloakParams = {\n            state: 'init'\n          };\n          this.authService.keycloak(keycloakParams).subscribe((accessData: AccessData) => {\n            console.log('[AuthApi]', 'keycloak', 'response', accessData);\n            if (accessData && accessData.redirect) {\n              document.location.href = accessData.redirect;\n            }\n            observer.next(Boolean(accessData && accessData.redirect));\n            observer.complete();\n          });\n          break;\n\n        default:\n          console.log('[AuthApi]', 'unknown type');\n          observer.next(null);\n          observer.complete();\n          break;\n      }\n    });\n  }\n\n  codeLogin(secureCode: string): Observable<boolean> {\n    console.log('[AuthApi]', 'codeLogin');\n    return new Observable((observer: Observer<boolean>) => {\n      switch (this.type) {\n        case KEYCLOAK:\n          const keycloakParams = {\n            state: 'init',\n            code: secureCode\n          };\n          this.authService.keycloak(keycloakParams).subscribe((accessData: AccessData) => {\n            console.log('[AuthApi]', 'keycloak', 'response', accessData);\n            this.success = this.handleAccessData(accessData);\n            observer.next(this.success);\n            observer.complete();\n          });\n          break;\n\n        default:\n          console.log('[AuthApi]', 'unknown type');\n          observer.next(null);\n          observer.complete();\n          break;\n      }\n    });\n  }\n\n  captchaLogin(): Observable<boolean> {\n    console.log('[AuthApi]', 'captchaLogin');\n    return of(null);\n  }\n\n  getToken(): string {\n    console.log('[AuthApi]', 'getToken');\n    return this.accessToken;\n  }\n\n  updateToken(): Observable<string> {\n    console.log('[AuthApi]', 'updateToken');\n    return new Observable((observer: Observer<string>) => {\n      this.authService.refresh(this.refreshToken).subscribe((accessToken: string) => {\n        console.log('[AuthApi]', 'updateToken', 'response', accessToken);\n        this.accessToken = accessToken;\n        observer.next(accessToken);\n        observer.complete();\n      });\n    });\n  }\n\n  private handleAccessData(accessData: AccessData): boolean {\n    console.log('[AuthApi]', 'handleAccessData', accessData);\n    if (accessData) {\n      this.accessToken = accessData.accessToken;\n      this.refreshToken = accessData.refreshToken;\n    } else {\n      this.accessToken = null;\n      this.refreshToken = null;\n    }\n    return Boolean(accessData && accessData.accessToken && accessData.refreshToken);\n  }\n}\n"]}